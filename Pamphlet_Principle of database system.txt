数据（data）是指用物理符号记录下来的、可以鉴别的信息，是描述事物的符号记录。
简述数据的表现形式。
数据的表现形式可以是包括数字、字母、文字、特殊字符组成的文本数据，也可以是图形、图像、动画、影像、声音、语言等多媒体数据。
数据库（DB）是指长期存储在计算机中的有组织的、可共享的数据集合，且数据库中的数据按一定的数据模型组织、描述和存储，具有较小的冗余度、较高的数据独立性，系统易于扩展，并可以被多个用户共享。
数据库中存储的数据具有三个基本特点：永久存储、有组织和可共享。
数据库管理系统主要包括以下几方面功能：
1、数据定义功能
2、数据操纵功能
3、数据库的运行管理功能
4、数据库的建立和维护功能
5、数据组织、存储和管理功能
6、与其他软件的网络通信功能、不同数据库管理系统之间的数据传输以及相互访问功能等。

一个完整的数据库系统包括数据库、数据库管理系统及相关实用工具、应用程序、数据库管理员和用户。

数据管理技术工经理了人工管理、文件系统和数据库系统三个阶段。

人工管理阶段数据管理的特点是:
1、数据不保存
2、应用程序管理数据
3、数据面向应用

文件系统将数据的逻辑结构和物理结构分离，由“存放方法”实现逻辑结构与物理结构之间的映射。

20世纪60年代后期依赖，文件系统的数据管理方法已经不能满足计算机技术与工业迅速发展的需求，于是数据库技术应运而生，出现了同意关联数据的、专门的软件系统--数据库管理系统。

与人工管理、文件系统两种数据管理方法相比较，数据库系统具有以下特点：
1、数据集成
2数据共享性高
3数据冗余小
4数据一致性
5数据独立性高
6实施统一管理与控制
7减小应用程序开发与维护的工作量 


数据库系统提供了两层数据独立：
1、数据的逻辑独立。不同的应用程序（用户）对同样的数据可以使用不同的视图，这意味着应用程序在一定范围内修改是，可以只修改它的数据库视图，而不修改数据本身的定义；反之，数据定义的修改,在一定范围内不会引起应用程序的修改。
2、数据的物理独立。可改变数据的存储结构或存取方法以响应变化的需求而无须修改现有的应用程序。

从数据库系统应用的用户角度来看，目前数据库系统常见的运行与应用结构有：客户/服务器结构、浏览器/服务器结构。
数据库系统的三级模式结构是指数据库系统是由模式、外模式和内模式三级构成的。
模式也称为概念模式或逻辑模式，它是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。
外模式也称为子模式或用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是与某一应用有关的数据的逻辑表示。
内模式也称为存储模式，是对数据库中数据物理结构和存储方式的描述，是数据在数据库内部的表示形式。
为了有效支撑数据的三级抽象及它们相互间的联系和转换，DBMS通过在内部提供三级模式之间的两层映像来实现，即 外模式/模式映像 与 模式/内模式映像

客户/服务器结构的工作模式：在数据库系统中，数据库的使用者使用命令行客户端、图形化界面管理工具、
应用程序等来连接数据库管理系统，并通过数据库管理系统查询和处理存储在底层数据库中的各种数据。

浏览器/服务器 结构的工作模式：
 在数据库系统中，将与数据库管理系统交互的客户端细分为“表示层” 和“处理层”  。“表示层”是数据库使用者的操作和展示界面，
 通常由用户上网的各种浏览器构成，由此减轻数据库系统中客户端的工作负担；而“处理层”也称为“中间层”，则主要负责处理数据库使用者的具体应用逻辑，与后台的数据库
 管理系统共同组成功能更加丰富的“胖服务器”
 
 
 
 
 
 数据模型 是数据库系统的核心和基础，是模型化数据和信息的工具。
 
 什么是数据模型？
 数据模型是用来描述数据的结构、定义在结构上的操纵以及数据间的约束的一组概念和定义。
 
 信息世界涉及的基本概念有：
 1、 实体。实体是指客观存在并可相互区别的事物
 2、属性。 属性是指实体所具有的某种特性。
 3、 码或键。码或键是指可唯一标识实体的属性集。
 4、域。 属性的取值范围称为该属性的域。
 5、实体型。 用实体名与属性名集合来抽象和刻画同类实体，称为实体型。
 6、 实体集。同型实体的集合称为实体集
 7、 联系。实体内部的联系通常是指实体各属性之间的联系； 实体之间的联系是指不同实体之间的联系。
 
 主要的逻辑数据模型有：
 1、 层次模型
 2、 网状模型 
 3、 关系模型  
 4  面向对象模型 
 
 
 
 
  关系数据库的基本特征是使用关系数据模型组织数据。
  常用的关系数据库管理系统有： foxpro 、access 以及开源项目 mysql 等
  
  
  关系模型中常用的关系操作包括 查询操作和插入、删除、修改操作两大部分
  
  
  关系操作的特点是集合操作方式，即操作的对象和结果都是集合。这种操作方式也称为一次一集合的方式。
  
  
  关系数据语言可以分为三类：关系代数语言、 关系演算语言 以及 兼具两者双重特点的语言。
  
  关系操作的能力表示方法有两种：
  1、 代数方式。 主要有关系代数，它是通过对关系的操作来表达查询要求的方式。
  2、 逻辑方式。 主要有关系演算，它是用谓词来表达查询要求的方式。关系演算按谓词变元的基本对象是元组变量还是域变量，分为元组关系演算和域关系演算。关系代数、元组关系演算和域关系演算三中语言在表达能力上是完全等价的。
  
  数据库的数据完整性是指数据库中数据的正确性、相容性和一致性。
  
  
  数据冗余 是指同一数据被反复存储的情况。
  数据的 插入操作异常 是指应该插入到数据库中的数据不能执行插入操作的情形。
  
  "不好"的关系模式可能会存在如下问题：
  1、数据冗余
  2、更新异常
  3、插入异常
  4、删除异常 
  
  
  关系数据库中的关系需要满足一定的要求，不同程度的要求称为不同的范式(NF) . 满足最低要求的称为第一范式，简称1NF，这是最基本的范式；在第一范式的基础上进一步满足一些新要求的称为第二范式(2NF); 以此类推，再进一步的范式是第三范式(3NF)及其改进形式BCNF.
  
   规范化指一个低一级范式的关系模式通过模式分解转换为若干个高一级范式的关系模式的集合的过程。在关系数据库系统中，所有的关系结构都必须是规范化的，即至少是第一范式的。
   实际应用中的很多数据格式都不是第一范式的，因此在数据库逻辑设计中需要将非规范化的结构转换为规范化的关系；同事为了减少数据库中的数据冗余和增强数据的易操作性，以及消除数据插入、删除异常等现象，要求数据库中的每个关系都必须满足一定的规范条件，以结构更单纯、更规则的关系逐步取代原有关系。
   
   
  1. 第一范式
  设R为任一给定关系，如果R中每个列与行的交点处的取值都是不可再分的基本元素，则R为第一范式。
  第一范式是一个不含重复组的关系，其中不存在嵌套结构。不满足第一范式的关系为非规范关系。
  非规范关系转化为1NF 可以通过重写关系中属性值相同部分的数据来实现。
  
  2.第二范式
  设R为任一给定关系，若R为1NF，且其所有非主属性都完全函数依赖于候选关键字，则R为第二范式。
  
  3、 第三范式
  设R为任一给定关系，若R为2NF，且其每一个非主属性都不传递函数依赖于候选关键字，则R为第三范式。
  
  4 BCNF
  
  设R为任一给定关系，X、Y为其属性集，F 为其函数依赖集，若R为3NF，且其F中所有函数依赖X->Y（Y不属于X）中的X必包含候选关键字，则R为BCNF。
  
  BCNF 解决了3NF中出现的插入及删除操作异常等问题，若R中每一函数依赖的决定因素都包含一个候选关键字，则R为BCNF. 决定因素可以是单一属性或组合属性。
  
  
  
  
  
  数据库的生命周期可分为：数据库分析与设计阶段、数据库实现与操作阶段。
  
  
  数据库分析与设计阶段包括需求分析、概念设计、逻辑设计和物理设计四个环节。
  
  
  
  数据库实现与操作阶段包含数据库的实现、操作与监督、修改与调整三个字阶段。
  
  数据库设计具有两个重要的目标：
  1、满足应用功能需求。其主要指用户当前与可预知的将来应用所需要的数据及其联系，应全部准确地存储在数据库之中，从而可满足
  用户应用中所需要的对数据进行的存、取、删、改等操作。
  
  2、良好的数据库性能。其主要指对数据的高效率存取和空间的节省，并且有良好的数据共享性、完整性、一致性及安全保密性。
  
  数据库设计方法可分为三类：直观设计法、规范设计法、计算机辅助设计法。
  
  
  数据库设计分为以下几个阶段：
  1、需求分析阶段。
  2、结构设计阶段。
  3、行为设计阶段
  4、数据库实施阶段
  5、数据库运行和维护阶段
  
  
  
  概念结构设计的常用方法有实体分析法和属性综合法两种，也分别称为自顶向下法和自低向上法。
  
  
  数据库逻辑模型一般由层次、网状、关系数据模型表示。
  
  
  物理设计的任务是什么？
  物理设计是指对于一个给定的数据库逻辑结构，研究并构造物理结构的过程，其具体任务主要是确定数据库在存储设备上的存储结构及存取方法，因DBMS 的不同还可能
  包括简历索引和聚集，以及物理块大小、缓冲区个数和大小、数据压缩的选择等。
  
  
  
  逻辑结构设计通常要求提供的数据信息包括：
  1、独立于特定DBMS 的概念模型
  2 、 有关响应时间、安全保密性、数据完整性及恢复方面的要求说明，包括保持数据一致性的规则说明。
  3、 数据量及使用频率
  4 特定DBMS 特性， 包括 DBMS 支持的数据模型及数据定义语言的说明。
  
  在完成逻辑结构设计之后，应该形成的输出信息包括：
  1、 一个特定DBMS 支持的概念模式，或称之为模式
  2、 一个或多个外部视图，或称之为子模式
  3 物理设计说明，主要包括存入数据库中的数据量、使用频率及响应时间要求。
  4 程序设计说明，它是在需求分析的基础上，根据已完成的逻辑模型，编制各程序名、执行逻辑步、存取数据的名、顺序及操作特性（读、写、删、改）的说明。
  
  
  
  
  
  关系数据库是一类采用关系模型作为逻辑数据模型的数据库系统，它的设计过程遵从数据库设计的基本步骤，关系数据库的概念结构设计与逻辑结构设计是关系数据库整个设计过程的关键。
  
  概念结构设计就是将需求分析得到的用户需求抽象为信息结构（即概念模型） 的过程，通常使用E-R 图 来作为描述现实世界的建模工具。
  
  
   E-R 图提供了标识信息世界中实体、属性和联系的方法。实体型用矩形表示，矩形框内写明实体的名称。属性用椭圆形表示，并用无向边将其与相应的实体连接起来。联系用
   菱形表示，菱形框内写明联系的名称并用无向边分别与有关实体连接起来，同时在无向边旁标上联系的类型（1：1、1：N或M:N ） ,如果一个联系具有属性，则这些属性
   也要用无向边与该联系连接起来。
   
   
   
   局部信息结构设计的步骤分为：
   1、确定局部范围
   2、 选择实体
   3、 选择实体关键字 
   4、 确定实体间联系
   5、 确定实体的属性 
   
   
   
   将E-R 图转换为关系模型实际上就是要将实体、实体的属性和实体间的联系转换为某种关系模式。这种转换一般遵守以下原则：
   1 、 一个实体型转换为一个关系模式。实体的属性作为关系的属性，实体的码作为关系的码。
   2、 一个一对一联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并。
   如果转换为一个独立的关系模式，则与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，
   每个实体的码均是该关系的候选码；如果与某一端实体对应的关系模式合并，则需要在该关系模式的属性中
   加入另一个关系模式的码和联系本身的属性。
   3、 一个一对多（1：N）联系可以转换为一个独立的关系模式，也可以与N端对应的关系模式合并,如果转换为一个独立的关系模式，则与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，则与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，而关心的码为N端实体的码。
   
   4、 一个多对多(M:N) 联系转换为一个关系模式。与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，而关系
   的码为各实体码的组合。
   
   
   
   5、 三个或三个以上实体间的一个多元联系可以转换为一个关系模式。与该多元联系相连的各实体的码以及联系本身的属性均转换为关系的
   属性，而关系的码均为各实体码的组合。
   
   6、 具有相同码的关系模式可合并。
   
   
   
   简答题：  一个好的全局E-R模型除能反映用户功能需求之外，还应满足下列条件：
   1、 实体类型个数尽可能少。
   2、 实体类型所含属性尽可能少。
   3、 实体类型间联系无冗余。
   
   
   
   
   
   
   
   全局E-R模型的优化步骤包括： 
     1、 相关实体类型的合并。
	 2、 消除不必要的冗余属性。
	 3、 消除不必要的冗余联系。 
	 
	 
	 
	 第四章： 
	 
	 sql是一种数据库查询和程序设计语言，主要用于存取数据以及查询、更新和管理关系数据库系统。
	 
	 
	 sql的功能主要是查询，除此之外还包括数据定义、数据操纵和数据控制等与数据库有关的一系列功能。
	 
	 
	 
	 简答： 
	 sql具有以下特点：
	 1、 sql不是某个特定数据库供应商专有的语言。
	 2、 sql简单易学 
	 3、 sql是一种强有力的语言，灵活使用其语言元素，可以进行非常复杂和高级的数据库操作。 
	 4、 sql语句不区分大小写。
	 
	 
	 
	 (数据定义语言)的主要功能是对数据库及数据库中的各种对象进行创建、删除、修改等操作。
	 
	 
	 
	 
	 简答：     数据定义语言包括的主要sql语句有： 
	 1、 create语句。其主要功能是创建数据库或数据库对象。
	 2、 alter语句。 其主要功能是对数据库或数据库对象进行修改。
	 3、 drop 语句。其主要功能是删除数据库或数据库对象。
	 
	 
	 数据库操纵语言包括的主要sql语句有： 
	 1、 select语句。 其主要功能是从表或视图中检索数据。
	 2、 insert语句。 其主要功能是将数据插入到表或视图中。
	 3、 update语句。 其主要功能是修改表或视图中的数据。
	 4、 delete语句。  其主要功能是从表或视图中删除数据。
	 
	 
	 
	 
	 
	 
	 
	 （mysql）是一个关系数据库管理系统(RDBMS)
	 MYSQL具有(客户/服务器)体系结构，最初由瑞典MySQL AB公司开发 
	 
	 
	 简答： mysql的特点有：
	 1、 体积小 
	 2、 速度快 
	 3、 开放源代码
	 4、 遵循GPL(GUN通用公共许可证)
	 
	 (常量)是指在程序运行过程中不变的量。 
	 
	 
	 
	 简答： 常量可分为以下几类：
	 1、 字符串常量 
	 2、 数值常量 
	 3、 十六进制常量 
	 4、 时间日期常量 
	 5、 位字段值 
	 6、 布尔值 
	 7、 NULL值 
	 
	 
	 (表达式)是常量、变量、列名、复杂计算、运算符和函数的组合。 
	 
	 简答： MySql提供了很多内置函数，主要类型有： 
	 1、 数学函数 
	 2、 聚合函数 
	 3、 字符串函数 
	 4、 日期和事件函数 
	 5、 加密函数
	 6、 控制流程函数 
	 7、 格式化函数 
	 8、 类型转换函数 
	 9、 系统信息函数 
	 
	 简答： 目前，使用mysql数据库管理系统构建各种信息管理系统或互联网网站的应用环境，主要有两种构架方式： 
	 1、 LAMP(Linux+Apache+MySQL+PHP/Perl/Python),即使用Linux作为操作系统，Apache作为Web服务器，MySQL作为数据库管理系统,PHP、Perl或Python语言作为服务器端脚本解释器.
	 2、 WAMP(Windows+Apache+Mysql+PHP/Perl/Python) , 即使用windows作为操作系统，Apache作为Web服务器，Mysql作为数据库管理系统，PHP、Perl或Python语言作为服务器端脚本解释器。
	 
	 
	 
	 
	 
	 第三节： 数据定义 
	 
	 在mysql中 ， 可以使用create database 或 create schema 语句创建数据库 
	 
	 
	 create database 或 create schema 语句的语法格式是： 
	 
	 create {database}schema}[if not exists] db_name 
	 [default] character set [==] charset_name 
	 |[default] collate [==] collation_name 
	 
	 
	 
	 
	 在mysql 中,alter database 或 alter schema 语句通常用来修改已被创建的数据库的相关参数。
	 
	 alter database 或 alter schema 语句的语法简略为： 
	  alter {database|schema}[db_name]
	  alter_specification...
	  
	  
	  在mysql中，可以使用create table 语句创建表 
	  
	  create table语句的基本语法格式是：
	  create [temporary] table tbl_name 
	  (
		字段名1 数据类型[列级完整性约束条件][默认值]
		[,字段名2 数据类型[列级完整性约束条件][默认值]]
		[,...]
		[,表级完整性约束条件]
	  )[ENGINE=引擎类型];
	  
	  
	  
	  (索引)是指DBMS根据表中的一列或若干列按照一定顺序建立的列值与记录行之间的对应关系表。
	  
	  
	  
	  根据具体用途，索引在逻辑上通常分为三类：
	  1、 普通索引(index)
	  2、唯一性索引(unique)
	  3、 主键(primary key )
	  
	  
	  在mysql数据库，创建索引的方式有：
	  1、 使用create index 语句创建索引 
	  2、 使用create table 语句创建索引 
	  3、 使用 alter table 语句创建索引 
	  
	  
	  
	  create index 语句是专门用于创建索引的sql语句，可以使用它在一个已有的表上创建索引，但该语句不能创建主键。 
	  
	  create index 语句的常用语法格式是： 
	  create [unique] index index_name 
	     on tbl_name(index_col_name,...)
		 
		 
		使用create table 语句出创建索引的具体使用方法时在该语句语法中的表创建定义(create definition) 部门添加以下语法成分中的某一项或几项：
				1、 语法项[constraint[symbol]]primary key (index_col_name,...),用于表示在创建表的同时创建该表的主键。
				
				2、 语法项{index|key}[index_name](index_col_name,...),用于表示在创建新表的同时创建该表的索引。
				
				3、 语法项[constraint[symbol]] unique [index|key][index_name](index_col_name,...),用于表示在创建新表的同时创建该表的唯一性索引。
				
				4、 语法项[constraint[symbol]]foreign key[index_name](index_col_name,...),用于表示在创建新表的同时创建该表的外键。 
				
				  使用 alter table 语句创建索引的具体使用方法是在该语句语法中添加以下语法成分中的某一项或几项：
				  1、 语法项ADD {INDEX|KEY}[index_name](index_col_name,...) , 用于表示在修改表的同时为该表添加索引。
				  
				  2、 语法项add[constraint[symbol]] primary key(index_col_name,...),用于表示在修改表的同时为该表添加主键。 
				  
				  3、 语法项add [constraint [symbol]] unique [index|key][index_name](index_col_name,...) , 用于表示在修改表的同时为该表添加唯一性索引。
				  
				  4、 语法项add [constraint [symbol]] foreign key[index_name](index_col_name,...),用于表示在修改表的同时为该表添加外键。
				  
				  
				  
				  
				  
				  
				  第四节： 数据更新 
				  
				  在mysql 中，可以使用update 语句来修改更新一个表中的数据，实现对表中行的列数据进行修改。
				  
				  update 语句的语法格式是： 
				  
				  update tbl_name 
				  set col_namel={exprl|DEFAULT}[,col_name2={expr2|DEFAULT}]...
				  [where where_condition]
				  [order by ...]
				  [limit row_count]
				  
				  
				  
				  在 mysql中，使用insert...values语句插入单行或多行元组数据的语法格式是：
				  insert [into] tbl_name[(col_name,...)]
				  {values|value}({expr|DEFAULT},...),(...),...
				  
				  
				  在mysql中， 可以使用 insert...set 语句直接给表中的某些列指定对应的列值，即要插入数据的列名在set 子句中指定，这种方式会更加灵活，其语法格式是：
					insert [into] tbl_name 
						set col_name={expr|DEFAULT},...
						
						
						
						
						
						
						
						
						
						
				第五节： 数据查询 


			select 语句的功能是从数据库中快捷方便地检索、统计或输出数据。 在mysql中， select 语句的常用语法格式是： 
			
			select 
			[ALL|DISTINCT|DISTINCTROW]
			select_expr[,select_expr...]
			from table_references 
			[where where_condition]
			[group by {col_name|expr|position}
			[asc|desc],...[with rollup]]
			[having where_condition]
			[order by {col_name|expr|position}
			[asc|desc],...]
			[limit {[offset,]row_count|row_count offset offset}]
			
			
			在此语法结构中，各个子句的功能是： 
			1、 select 子句用于指定输出的字段。
			
			2、from 子句用于指定数据的来源  
			
			3、 where 子句用于指定数据的选择条件 
			
			4、 group by 子句用于检索到的记录进行分组 
			
			5、 having 子句用于指定组的选择条件 

			6、 order by 子句用于对查询的结果进行排序。
			
			
			（聚合函数）通常是数据库系统中一类系统内置函数，常用于一组值进行计算，然后返回单个值。 
			
			
			mysql中常用的聚合函数有： 
			1、 count 其功能是求组中的项数 
			
			2、 max   其功能是求最大值 
			
			3、 min 其功能是求最小值  
			
			4、 sum  其功能是返回表达式中所有值的和。
			
			5、 avg  其功能是求组中值的平均值  
			
			6、 std 或 stddev 。 其功能是返回给定表达式中所有值的标准值。
			
			7、 variance 其功能是返回给定表达式中所有值的方差。
			
			8、 group_concat. 其功能是返回由属于一组的列值连接组合而成的结果。
			
			9、 bit_and.其功能是逻辑或。
			
			10、 bit_or 其功能是逻辑与 。
			
			11、 bit_xor 其功能是逻辑异或 
			
			
			
			
		在select 语句中，为了实现对每个组的聚集计算，允许使用group by 子句，将结果集中的数据行根据选择列的值进行逻辑分组。

group by 子句的使用语法格式是：  
			group by {col_name}expr|position}[ASC|DESC],...[WITH ROLLUP]
			
			
			
			
			
			第六节：视图 
			
			视图是从一个或多个表或者其他视图中通过查询语句导出的表，它也包含一系列带有名称的数据列和若干条数据行，并有自己的视图名。
			
			
			视图与基本表的区别是：
				1、 视图不是数据库中真实的表，而是一张虚拟表，其结构和数据是建立在对数据库中真实表的查询基础上的。
				
				2、 视图的内容是由存储在数据库中进行查询操作的sql语句来定义的，它的列数据与行数据均来自于定义视图的查询所引用的真实表，并且这些数据
				是在引用视图时动态生成的。 
				
				3、  视图不是以数据集的形式存储在数据库中，它所对应的数据实际上是存储在视图所引用的真实表(基本表)中 

				4、 视图是用来查看存储在别处的数据的一种虚拟表，而其自身并不存储数据。 
				
				
				
				使用视图的优点：
				1、 集中分散数据 
				2、 简化查询语句 
				3、 重用sql语句 
				4、 保护数据安全 
				5、 共享所需数据 
				6、 更改数据格式 
				
				
				
				
				
				在mysql中， 可以使用 create view语句来创建视图 
				create view 语句常用的语法格式是： 
						create view view_name[(column_list)]
						as select_statement 
						[with [cascaded|local]check option]
						
						
				对于可更新的视图，需要该视图中的行和基本表中的行之间具有(一对一)的关系 。
				
				
				
				简答： 视图用于查询检索，主要体现在以下应用中：
				1、 利用视图简化复杂的表连接。
				
				2、 使用视图重新格式化检索出的数据  
				
				3、 使用视图过滤不想要的数据  
				
				
				
				
			
			
			存储过程是一组为了完成某项特定功能的sql语句集，其实质上就是一段存储在数据库中的代码。
			
			to 20 上 
				
			
			






				
				  
				  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 


